運用generate_password_hash 和check_password_hash

引入
>>> from werkzeug.security import generate_password_hash, check_password_hash
>>>
>>> password= 'admin'
>>> generate_password_hash('admin')
'pbkdf2:sha256:150000$ojG3JQ1D$9399517beb62235f097c6c2d91d3c3781028a7542ac18bd386eac28ef905daf6'
>>> generate_password_hash('admin')
'pbkdf2:sha256:150000$ZsyVkLXT$08a965a924af16454a6c7a2ec1addf47b0cf43fd2894b9426429c91f54994731'
每次產生的hash值都會不一樣

檢查密碼是否符合hash
>>> b=generate_password_hash('admin')
>>> b
'pbkdf2:sha256:150000$tYrRyYQ4$b5b9bb88b0fd81af991fa848e86d62bdee4fe4c560c9e6d72fe11f03989a09b1'
>>> check_password_hash(b,'admin')
True    輸入正確密碼的返回值
>>> check_password_hash(b,'guestadmin')
False   輸入錯誤的密碼

命令環境下測試創建一個使用者並用admin生成hash密碼
>>> from twittor import db, create_app
>>> from twittor.models import User
>>> u=User(username='admin', email='admin@gmail.com')
>>> u
id=None,username=admin, email=admin@gmail.com, password_hash=None
>>>
>>> u.set_password('admin')
>>> u
id=None,username=admin, email=admin@gmail.com, password_hash=pbkdf2:sha256:150000$cX9nnRsh$24ef87a59cc9488b3f6535f2c11a8b719f3979eed674f0484d40e047f0b11a09
檢查用戶輸入的密碼是否正確
>>> u.check_password('admin')
True
>>> u.check_password('aaadmin')
False
>>>

再命令列直接創建一個帳號的流程
>>> from twittor import db, create_app
>>> from twittor.models import User
>>> app=create_app()
>>> app.app_context().push()
>>> u=User(id=1, username='admin', email='admin@gmail.com')
>>> u.set_password('admin')
將以上用戶設定傳入數據庫
>>> db.session.add(u)
>>> db.session.commit()
檢查數據庫
>>> User.query.all()
>>> User.query.filter_by(username='admin') 
<flask_sqlalchemy.BaseQuery object at 0x02C74830>  比對有此用戶 但得到的不是我們要的資料內容

>>> User.query.filter_by(username='admin').first() 比對有此用戶可呼叫正確的資料庫數據內容
id=1,username=admin, email=admin@gmail.com, password_hash=pbkdf2:sha256:150000$rptGheMh$e24f6c5b575328ad1fd42167f87f6e0b25a1a3057295aee9a1bb114476c15dc8

>>> User.query.filter_by(username='aaadmin').first() 沒有這個用戶 回傳None 
